blueprint:
  name: Timer-Based Lighting Controller
  description: >
    Turns specified light(s) ON when a selected timer becomes active, and OFF when it goes idle.
    Starts the timer when any trigger entity matches a user-defined state (defaults to 'on').
    Optional duration, global conditions, and per-action conditions supported.
  domain: automation
  input:
    timer_entity:
      name: Timer Entity
      description: Timer that controls the light state
      selector:
        entity:
          domain: timer

    lights:
      name: Light(s) to Control
      description: The light(s) to turn on when timer is active and off when idle
      selector:
        target:
          entity:
            domain: light

    trigger_entities:
      name: Trigger Entities
      description: Entities that will start the timer when they change to a matching state
      selector:
        entity:
          multiple: true

    trigger_states:
      name: Trigger States
      description: Comma-separated states (e.g. 'on, open, home') that will start the timer
      default: "on"
      selector:
        text:

    timer_duration:
      name: Timer Duration
      description: How long the timer should run when triggered
      default: "00:02:00"
      selector:
        duration:

    extra_conditions:
      name: Global Conditions (optional)
      description: These must be true for either ON or OFF action to run
      default: []
      selector:
        condition: {}

    on_conditions:
      name: Light ON Conditions (optional)
      description: These must be true for the ON action (when timer goes active)
      default: []
      selector:
        condition: {}

    off_conditions:
      name: Light OFF Conditions (optional)
      description: These must be true for the OFF action (when timer goes idle)
      default: []
      selector:
        condition: {}

mode: restart

trigger:
  - platform: state
    entity_id: !input timer_entity
    from: idle
    to: active
    id: timer_started

  - platform: state
    entity_id: !input timer_entity
    to: idle
    id: timer_finished

  - platform: state
    entity_id: !input trigger_entities
    id: trigger_entity_changed

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: trigger_entity_changed
          - condition: template
            value_template: >
              {% set states = input.trigger_states.split(',') | map('trim') | list %}
              {{ trigger.to_state.state in states }}
        sequence:
          - service: timer.start
            data:
              entity_id: !input timer_entity
              duration: !input timer_duration

      - conditions:
          - condition: trigger
            id: timer_started
          - condition: and
            conditions: !input extra_conditions
          - condition: and
            conditions: !input on_conditions
        sequence:
          - service: light.turn_on
            target: !input lights

      - conditions:
          - condition: trigger
            id: timer_finished
          - condition: and
            conditions: !input extra_conditions
          - condition: and
            conditions: !input off_conditions
        sequence:
          - service: light.turn_off
            target: !input lights