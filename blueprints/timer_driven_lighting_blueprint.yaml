blueprint:
  name: Timer-Based Lighting Automation (v2025.07.07.09.31)
  author: Dima Tokar
  source_url: https://github.com/dimatx/home-assistant/blob/main/blueprints/timer_driven_lighting_blueprint.yaml
  description: >
    Turns specified light(s) ON when a selected timer becomes active, and OFF when it goes idle.
    Starts the timer when any trigger entity matches a user-defined state (defaults to 'on').
    Optional duration, global conditions, and per-action conditions supported.
  domain: automation
  input:
    retry_light_off_check:
      name: Retry Light Off Verification
      description: >
        If enabled, the automation will retry turning off the lights after the timer goes idle
        at the given delays â€” but only if the lights are still on.
      default: false
      selector:
        boolean:

    retry_delay_1:
      name: Retry Delay 1 (minutes)
      description: First delay after timer goes idle
      default: 3
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
          mode: slider

    retry_delay_2:
      name: Retry Delay 2 (minutes)
      description: Second delay (total minutes from idle)
      default: 10
      selector:
        number:
          min: 1
          max: 120
          unit_of_measurement: minutes
          mode: slider
    timer_entity:
      name: Timer entity (required)
      description: Timer that controls the light state
      selector:
        entity:
          domain: timer

    lights:
      name: Light(s) to control (required)
      description: The light(s) to turn on when timer is active and off when idle
      selector:
        target:
          entity:
            domain: light

    trigger_entities:
      name: Trigger entities (required)
      description: Entities that will start the timer when they change to a matching state
      selector:
        entity:
          multiple: true

    trigger_states:
      name: Trigger states (required)
      description: Comma-separated states (e.g. 'on, open, home') that will start the timer
      default: "on"
      selector:
        text:

    # timer_duration:
    #   name: Timer duration (optional)
    #   description: How long the timer should run when triggered. Defaults to the timer default.
    #   selector:
    #     duration:

    extra_conditions:
      name: Global conditions (optional)
      description: These must be true for either ON or OFF action to run
      default: []
      selector:
        condition: {}

    on_conditions:
      name: Light ON conditions (optional)
      description: These must be true for the ON action (when timer goes active)
      default: []
      selector:
        condition: {}

    off_conditions:
      name: Light OFF conditions (optional)
      description: These must be true for the OFF action (when timer goes idle)
      default: []
      selector:
        condition: {}

mode: restart

variables:
  trigger_states: !input trigger_states

trigger:
  - platform: state
    entity_id: !input timer_entity
    from: idle
    to: active
    id: timer_started

  - platform: state
    entity_id: !input timer_entity
    to: idle
    id: timer_finished

  - platform: state
    entity_id: !input trigger_entities
    id: trigger_entity_changed

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: '{{ retry_light_off_check }}'
        sequence:
          - delay:
              minutes: !input retry_delay_1
          - condition: template
            value_template: >
            {% set lights = expand(!input lights | default([])) %}
            {{ lights | selectattr('state', 'eq', 'on') | list | count > 0 }}
          - service: light.turn_off
            target: !input lights

          - delay:
              minutes: >-
                {{ (int(!input.retry_delay_2) - int(!input.retry_delay_1)) if int(!input.retry_delay_2) > int(!input.retry_delay_1) else 0 }}
          - condition: state
            entity_id: !input lights
            state: 'on'
          - service: light.turn_off
            target: !input lights
  - choose:
      - conditions:
          - condition: trigger
            id: trigger_entity_changed
          - condition: template
            value_template: >
              {% set states = trigger_states.split(',') | map('trim') | list %}
              {{ trigger.to_state.state in states }}
        sequence:
          - service: timer.start
            data:
              entity_id: !input timer_entity
              # duration: !input timer_duration

      - conditions:
          - condition: trigger
            id: timer_started
          - condition: and
            conditions: !input extra_conditions
          - condition: and
            conditions: !input on_conditions
        sequence:
          - service: light.turn_on
            target: !input lights

      - conditions:
          - condition: trigger
            id: timer_finished
          - condition: and
            conditions: !input extra_conditions
          - condition: and
            conditions: !input off_conditions
        sequence:
          - service: light.turn_off
            target: !input lights