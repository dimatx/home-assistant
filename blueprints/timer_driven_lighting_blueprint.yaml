blueprint:
  name: Timer-Based Lighting Automation (v2025.07.07.10.41)
  author: Dima Tokar
  source_url: https://github.com/dimatx/home-assistant/blob/main/blueprints/timer_driven_lighting_blueprint.yaml
  description: >
    Automatically controls lights based on a timer and trigger entities.
    
    **How it works:**
    - Timer starts when any trigger entity matches specified states
    - Lights turn ON when timer becomes active
    - Lights turn OFF when timer goes idle
    - Optional retry mechanism ensures lights turn off properly
    
    **Perfect for:** Motion sensors, door contacts, presence detection, etc.
  domain: automation
  input:
    # === REQUIRED SETTINGS ===
    timer_entity:
      name: Timer Entity
      description: The timer that controls when lights turn on/off
      selector:
        entity:
          domain: timer

    lights:
      name: Lights to Control
      description: Light(s) that will be controlled by this automation
      selector:
        target:
          entity:
            domain: light

    trigger_entities:
      name: Trigger Entities
      description: Entities that start the timer (sensors, switches, etc.)
      selector:
        entity:
          multiple: true

    trigger_states:
      name: Trigger States
      description: States that will start the timer (comma-separated, e.g., "on, open, home")
      default: "on"
      selector:
        text:
          type: text

    # === OPTIONAL SETTINGS ===
    timer_duration:
      name: Timer Duration (Optional)
      description: Override the timer's default duration. Leave empty to use timer's configured duration.
      default: ""
      selector:
        duration:

    # === RETRY SETTINGS ===
    enable_retry:
      name: Enable Light Off Retry
      description: Automatically retry turning off lights if they're still on after the timer expires
      default: false
      selector:
        boolean:

    first_retry_delay:
      name: First Retry Delay
      description: Minutes to wait before first retry attempt
      default: 3
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: minutes
          mode: slider

    second_retry_delay:
      name: Second Retry Delay
      description: Minutes to wait before second retry attempt (from timer idle)
      default: 10
      selector:
        number:
          min: 2
          max: 60
          unit_of_measurement: minutes
          mode: slider

    # === CONDITION SETTINGS ===
    global_conditions:
      name: Global Conditions (Optional)
      description: Conditions that must be true for any action to run
      default: []
      selector:
        condition:

    turn_on_conditions:
      name: Turn ON Conditions (Optional)
      description: Additional conditions required to turn lights ON
      default: []
      selector:
        condition:

    turn_off_conditions:
      name: Turn OFF Conditions (Optional)
      description: Additional conditions required to turn lights OFF
      default: []
      selector:
        condition:

mode: restart

variables:
  trigger_states_input: !input trigger_states
  trigger_states_list: >
    {{ (trigger_states_input | string).split(',') | map('trim') | list }}
  timer_duration_value: !input timer_duration
  enable_retry_value: !input enable_retry
  first_retry_minutes: !input first_retry_delay
  second_retry_minutes: !input second_retry_delay

trigger:
  - platform: state
    entity_id: !input timer_entity
    from: idle
    to: active
    id: timer_active

  - platform: state
    entity_id: !input timer_entity
    to: idle
    id: timer_idle

  - platform: state
    entity_id: !input trigger_entities
    id: entity_triggered

condition:
  - condition: and
    conditions: !input global_conditions

action:
  - choose:
    # === HANDLE TRIGGER ENTITY STATE CHANGES ===
    - conditions:
        - condition: trigger
          id: entity_triggered
        - condition: template
          value_template: >
            {{ trigger.to_state.state in trigger_states_list }}
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ timer_duration_value != '' and timer_duration_value != none }}
              sequence:
                - service: timer.start
                  data:
                    entity_id: !input timer_entity
                    duration: !input timer_duration
          default:
            - service: timer.start
              data:
                entity_id: !input timer_entity

    # === HANDLE TIMER BECOMING ACTIVE (TURN LIGHTS ON) ===
    - conditions:
        - condition: trigger
          id: timer_active
        - condition: and
          conditions: !input turn_on_conditions
      sequence:
        - service: light.turn_on
          target: !input lights

    # === HANDLE TIMER BECOMING IDLE (TURN LIGHTS OFF) ===
    - conditions:
        - condition: trigger
          id: timer_idle
        - condition: and
          conditions: !input turn_off_conditions
      sequence:
        - service: light.turn_off
          target: !input lights
        
        # === RETRY LOGIC ===
        - if:
            - condition: template
              value_template: "{{ enable_retry_value }}"
          then:
            - sequence:
                # First retry
                - delay:
                    minutes: "{{ first_retry_minutes }}"
                - service: light.turn_off
                  target: !input lights
                
                # Second retry (only if second delay is greater than first)
                - if:
                    - condition: template
                      value_template: "{{ second_retry_minutes > first_retry_minutes }}"
                  then:
                    - delay:
                        minutes: "{{ second_retry_minutes - first_retry_minutes }}"
                    - service: light.turn_off
                      target: !input lights